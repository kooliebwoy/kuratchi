import type { SchemaDsl } from '../utils/types.js';

export const adminSchemaDsl: SchemaDsl = {
  name: 'admin',
  version: 1,
  mixins: {
    timestamps: {
      updated_at: 'text default now',
      created_at: 'text default now',
      deleted_at: 'text'
    }
  },
  tables: {
    users: {
      id: 'text primary key not null',
      name: 'text',
      firstName: 'text',
      lastName: 'text',
      phone: 'text',
      email: 'text not null unique',
      emailVerified: 'timestamp_ms',
      image: 'text',
      status: 'boolean',
      role: 'enum(superadmin,owner,editor,member)',
      password_hash: 'text',
      accessAttempts: 'integer',
      '...timestamps': true,
    },
    passwordResetTokens: {
      id: 'text primary key',
      token: 'text not null',
      email: 'text not null',
      expires: 'timestamp_ms not null',
      '...timestamps': true,
    },
    magicLinkTokens: {
      id: 'text primary key',
      token: 'text not null unique',
      email: 'text not null',
      redirectTo: 'text',
      consumed_at: 'timestamp_ms',
      expires: 'timestamp_ms not null',
      '...timestamps': true,
    },
    emailVerificationToken: {
      id: 'text primary key',
      token: 'text not null',
      email: 'text not null',
      userId: 'text not null',
      expires: 'timestamp_ms not null',
      '...timestamps': true,
    },
    organizationUsers: {
      id: 'text primary key not null',
      email: 'text',
      organizationId: 'text',
      organizationSlug: 'text',
      '...timestamps': true,
    },
    organizations: {
      id: 'text primary key not null',
      organizationName: 'text',
      email: 'text unique',
      organizationSlug: 'text unique',
      notes: 'text',
      stripeCustomerId: 'text',
      stripeSubscriptionId: 'text',
      status: 'enum(active,inactive,lead)',
      '...timestamps': true,
    },
    activity: {
      id: 'text primary key',
      userId: 'text',
      action: 'text not null',
      data: 'json default (json_object())',
      status: 'boolean',
      ip: 'text',
      userAgent: 'text',
      '...timestamps': true,
    },
    session: {
      sessionToken: 'text primary key not null',
      userId: 'text not null -> users.id cascade',
      expires: 'timestamp_ms not null',
      '...timestamps': true,
    },
    oauthAccounts: {
      id: 'text primary key',
      userId: 'text -> users.id cascade',
      provider: 'text not null',
      providerAccountId: 'text not null',
      access_token: 'text',
      refresh_token: 'text',
      expires_at: 'timestamp_ms',
      scope: 'text',
      token_type: 'text',
      id_token: 'text',
      '...timestamps': true,
    },
    databases: {
      id: 'text primary key not null',
      name: 'text unique',
      dbuuid: 'text unique',
      isArchived: 'boolean',
      isActive: 'boolean',
      lastBackup: 'timestamp_ms',
      schemaVersion: 'integer default 1',
      needsSchemaUpdate: 'boolean default 0',
      lastSchemaSync: 'timestamp_ms',
      organizationId: 'text -> organizations.id',
      '...timestamps': true,
    },
    dbApiTokens: {
      id: 'text primary key not null',
      token: 'text not null unique',
      name: 'text',
      databaseId: 'text -> databases.id',
      expires: 'timestamp_ms',
      revoked: 'boolean',
      '...timestamps': true,
    },
  },
} as const;
